// Code generated by MockGen. DO NOT EDIT.
// Source: report.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "balance_avito/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGoCSVAdapter is a mock of GoCSVAdapter interface.
type MockGoCSVAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockGoCSVAdapterMockRecorder
}

// MockGoCSVAdapterMockRecorder is the mock recorder for MockGoCSVAdapter.
type MockGoCSVAdapterMockRecorder struct {
	mock *MockGoCSVAdapter
}

// NewMockGoCSVAdapter creates a new mock instance.
func NewMockGoCSVAdapter(ctrl *gomock.Controller) *MockGoCSVAdapter {
	mock := &MockGoCSVAdapter{ctrl: ctrl}
	mock.recorder = &MockGoCSVAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoCSVAdapter) EXPECT() *MockGoCSVAdapterMockRecorder {
	return m.recorder
}

// MarshalStructHistoryToCSV mocks base method.
func (m *MockGoCSVAdapter) MarshalStructHistoryToCSV(transactionsHistory []models.TransactionsHistory) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalStructHistoryToCSV", transactionsHistory)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalStructHistoryToCSV indicates an expected call of MarshalStructHistoryToCSV.
func (mr *MockGoCSVAdapterMockRecorder) MarshalStructHistoryToCSV(transactionsHistory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalStructHistoryToCSV", reflect.TypeOf((*MockGoCSVAdapter)(nil).MarshalStructHistoryToCSV), transactionsHistory)
}

// MarshalStructReportToCSV mocks base method.
func (m *MockGoCSVAdapter) MarshalStructReportToCSV(report []models.AccountingReport) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalStructReportToCSV", report)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalStructReportToCSV indicates an expected call of MarshalStructReportToCSV.
func (mr *MockGoCSVAdapterMockRecorder) MarshalStructReportToCSV(report interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalStructReportToCSV", reflect.TypeOf((*MockGoCSVAdapter)(nil).MarshalStructReportToCSV), report)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Accounting mocks base method.
func (m *MockDatabase) Accounting(ctx context.Context, reportDate models.ReportDate) ([]models.AccountingReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounting", ctx, reportDate)
	ret0, _ := ret[0].([]models.AccountingReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounting indicates an expected call of Accounting.
func (mr *MockDatabaseMockRecorder) Accounting(ctx, reportDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounting", reflect.TypeOf((*MockDatabase)(nil).Accounting), ctx, reportDate)
}

// TransactionsHistory mocks base method.
func (m *MockDatabase) TransactionsHistory(ctx context.Context, transactionsHistoryParams models.TransactionsHistoryParams) ([]models.TransactionsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionsHistory", ctx, transactionsHistoryParams)
	ret0, _ := ret[0].([]models.TransactionsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactionsHistory indicates an expected call of TransactionsHistory.
func (mr *MockDatabaseMockRecorder) TransactionsHistory(ctx, transactionsHistoryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionsHistory", reflect.TypeOf((*MockDatabase)(nil).TransactionsHistory), ctx, transactionsHistoryParams)
}
