// Code generated by MockGen. DO NOT EDIT.
// Source: fund_echo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "balance_avito/internal/models"
	types "balance_avito/internal/models/types"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFund is a mock of Fund interface.
type MockFund struct {
	ctrl     *gomock.Controller
	recorder *MockFundMockRecorder
}

// MockFundMockRecorder is the mock recorder for MockFund.
type MockFundMockRecorder struct {
	mock *MockFund
}

// NewMockFund creates a new mock instance.
func NewMockFund(ctrl *gomock.Controller) *MockFund {
	mock := &MockFund{ctrl: ctrl}
	mock.recorder = &MockFundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFund) EXPECT() *MockFundMockRecorder {
	return m.recorder
}

// AcceptPayment mocks base method.
func (m *MockFund) AcceptPayment(ctx context.Context, reservation models.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptPayment", ctx, reservation)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptPayment indicates an expected call of AcceptPayment.
func (mr *MockFundMockRecorder) AcceptPayment(ctx, reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptPayment", reflect.TypeOf((*MockFund)(nil).AcceptPayment), ctx, reservation)
}

// Accrue mocks base method.
func (m *MockFund) Accrue(ctx context.Context, accrual models.Accrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accrue", ctx, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accrue indicates an expected call of Accrue.
func (mr *MockFundMockRecorder) Accrue(ctx, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accrue", reflect.TypeOf((*MockFund)(nil).Accrue), ctx, accrual)
}

// GetBalance mocks base method.
func (m *MockFund) GetBalance(ctx context.Context, account models.Account) (types.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, account)
	ret0, _ := ret[0].(types.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockFundMockRecorder) GetBalance(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockFund)(nil).GetBalance), ctx, account)
}

// RejectPayment mocks base method.
func (m *MockFund) RejectPayment(ctx context.Context, reservation models.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectPayment", ctx, reservation)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectPayment indicates an expected call of RejectPayment.
func (mr *MockFundMockRecorder) RejectPayment(ctx, reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectPayment", reflect.TypeOf((*MockFund)(nil).RejectPayment), ctx, reservation)
}

// Reservation mocks base method.
func (m *MockFund) Reservation(ctx context.Context, reservation models.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reservation", ctx, reservation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reservation indicates an expected call of Reservation.
func (mr *MockFundMockRecorder) Reservation(ctx, reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reservation", reflect.TypeOf((*MockFund)(nil).Reservation), ctx, reservation)
}
