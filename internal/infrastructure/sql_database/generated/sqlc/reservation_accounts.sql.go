// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reservation_accounts.sql

package sqlc

import (
	"context"
)

const createReservedAccount = `-- name: CreateReservedAccount :exec
INSERT INTO reserved_accounts (
    user_id, order_id, service_id, cost
) value (
    ?, ?, ?, ?
    )
`

type CreateReservedAccountParams struct {
	UserID    int64
	OrderID   int64
	ServiceID int64
	Cost      int32
}

func (q *Queries) CreateReservedAccount(ctx context.Context, arg CreateReservedAccountParams) error {
	_, err := q.db.ExecContext(ctx, createReservedAccount,
		arg.UserID,
		arg.OrderID,
		arg.ServiceID,
		arg.Cost,
	)
	return err
}

const deleteReservedAccount = `-- name: DeleteReservedAccount :exec
DELETE FROM reserved_accounts
WHERE order_id = ? LIMIT 1
`

func (q *Queries) DeleteReservedAccount(ctx context.Context, orderID int64) error {
	_, err := q.db.ExecContext(ctx, deleteReservedAccount, orderID)
	return err
}

const getReservedAccount = `-- name: GetReservedAccount :one
SELECT id, user_id, order_id, service_id, cost FROM reserved_accounts
WHERE user_id = ? AND order_id = ? AND service_id = ? AND cost = ? LIMIT 1
`

type GetReservedAccountParams struct {
	UserID    int64
	OrderID   int64
	ServiceID int64
	Cost      int32
}

func (q *Queries) GetReservedAccount(ctx context.Context, arg GetReservedAccountParams) (ReservedAccount, error) {
	row := q.db.QueryRowContext(ctx, getReservedAccount,
		arg.UserID,
		arg.OrderID,
		arg.ServiceID,
		arg.Cost,
	)
	var i ReservedAccount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderID,
		&i.ServiceID,
		&i.Cost,
	)
	return i, err
}
