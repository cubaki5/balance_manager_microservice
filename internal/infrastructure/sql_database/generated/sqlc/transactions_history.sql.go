// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transactions_history.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTransactionRow = `-- name: CreateTransactionRow :exec
INSERT INTO transactions_history (
    user_id, operation, comments, time, sum
) VALUE (
         ?, ?, ?, ?, ?
    )
`

type CreateTransactionRowParams struct {
	UserID    int64
	Operation string
	Comments  sql.NullString
	Time      sql.NullTime
	Sum       int32
}

func (q *Queries) CreateTransactionRow(ctx context.Context, arg CreateTransactionRowParams) error {
	_, err := q.db.ExecContext(ctx, createTransactionRow,
		arg.UserID,
		arg.Operation,
		arg.Comments,
		arg.Time,
		arg.Sum,
	)
	return err
}

const getTransactionsReport = `-- name: GetTransactionsReport :many
SELECT operation, comments, time, sum
FROM transactions_history
WHERE user_id = ?
`

type GetTransactionsReportRow struct {
	Operation string
	Comments  sql.NullString
	Time      sql.NullTime
	Sum       int32
}

func (q *Queries) GetTransactionsReport(ctx context.Context, userID int64) ([]GetTransactionsReportRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsReport, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsReportRow
	for rows.Next() {
		var i GetTransactionsReportRow
		if err := rows.Scan(
			&i.Operation,
			&i.Comments,
			&i.Time,
			&i.Sum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
